Linear data structures like arrays, stacks, queues, and linked list have only one way to read the data. 
But a hierarchical data structure like a tree can be traversed in different ways.

	Inorder traversal:
First, visit all the nodes in the left subtree
Then the root node
Visit all the nodes in the right subtree :
	inorder(root->left)
	display(root->data)
	inorder(root->right)

	Preorder traversal:
Visit root node
Visit all the nodes in the left subtree
Visit all the nodes in the right subtree
	display(root->data)
	preorder(root->left)
	preorder(root->right)

	Postorder traversal:
Visit all the nodes in the left subtree
Visit all the nodes in the right subtree
Visit the root node
	postorder(root->left)
	postorder(root->right)
	display(root->data)
Types of Binary trees :

1. Full Binary Tree
A full Binary tree is a special type of binary tree in which every parent node/internal node 
has either two or no children.
Full Binary Tree Theorems:
	Let, i = the number of internal nodes
		n = be the total number of nodes
		l = number of leaves
		λ = number of levels
	The number of leaves is i + 1.
	The total number of nodes is 2i + 1.
	The number of internal nodes is (n – 1) / 2.
	The number of leaves is (n + 1) / 2.
	The total number of nodes is 2l – 1.
	The number of internal nodes is l – 1.
	The number of leaves is at most 2λ - 1.

2. Perfect Binary Tree
A perfect binary tree is a type of binary tree in which every internal node has exactly two child nodes 
and all the leaf nodes are at the same level.
Perfect Binary Tree Theorems:
	A perfect binary tree of height h has 2h + 1 – 1 node.
	A perfect binary tree with n nodes has height log(n + 1) – 1 = Θ(ln(n)).
	A perfect binary tree of height h has 2h leaf nodes.
	The average depth of a node in a perfect binary tree is Θ(ln(n)).